using static IterableHelpers;
using static FxCs.Helpers;

public partial class Program
{
	public static void HighOrderFunctions()
	{
		// Custom - ForEach
		ForEach(WriteLine,
			Map(x => x * 10,
				Filter(x => x % 2 == 1,
					Naturals(5))));


		// Spread Element after C#12
		int[] result = [
			.. Naturals(3),
			.. Naturals(3),
			.. Naturals(3)
		];

		// native foreach
		foreach (var n in Map(x => x * 10, Filter(x => x % 2 == 1, Naturals(5))))
		{
			WriteLine(n);
		}

		Map(x => x * 10, Enumerable.Range(1, 10)).ToList().ForEach(WriteLine);
	}

	private record User(string Name);

	public static void TypeSystemExample()
	{

		// C#의 타입 시스템 vs Typescript

		// Type Inference
		// High Order Function
		// Generic?
		// Purpose is safety and good maintainance
		// OOP and FunctionProgramming
		// Introduce as root of FunctionalProgramming

		WriteLine(Add(10, 12));

		static int Add(int a, int b)
		{
			return a + b;
		}

		// The type name is generated by the compiler and is not available at the source code level.
		// Warning: This is Literal Object
		var user = new
		{
			Name = "Marty",
			Age = 30,
		};

		// Compile Error anonymous object is readonly property
		// user.Name = 123;


		var a = Identity("h1");
		var b = Identity(1);
		var f = Identity((int n) => n % 2 == 1);
		var e = Identity(new User("E"));
		static T Identity<T>(T arg) => arg;

		var getFive = Constant(5);
		var ten = getFive() + getFive();
		WriteLine(ten);

		var getHi = Constant("Hi");
		WriteLine(getHi() + getHi());

	}

	public static void CustomReduceExample()
	{
		int[] array = [1, 2, 3];
		var sum = Reduce((acc, a) => acc + a, 0, array);
		WriteLine(sum);

		string[] strings = ["a", "b", "c"];
		var abc = Reduce((acc, a) => $"{acc}{a}", string.Empty, strings);
		WriteLine(abc);

		int[] array2 = [1, 2, 3];
		var sum2 = Reduce((a, b) => a + b, array2);

		string[] words = ["hello", "beautiful", "world"];

		WriteLine(Reduce((a, b) => $"{a} {b}", words));

		// C# Enumerable.Aggregate
		WriteLine(words.Aggregate((a, b) => $"{a} {b}"));
	}

	public static void DirectorySearchExample()
	{
		ForEach(WriteLine,
			Map(filename => Path.GetFileName(filename),
				Filter(filename => filename.EndsWith(".cs"),
					Directory.EnumerateFiles(Environment.CurrentDirectory))));
	}

	public static void PipeOperatorExample()
	{
		var mapped = Fx(["1", "2"])
			.Map(int.Parse)
			.Map(b => b + b);
	}
}
